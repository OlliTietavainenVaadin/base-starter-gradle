// later on we will be able to get rid of this buildscript{} block and simply include
// the plugin via id("com.vaadin")
buildscript {
    repositories {
        gradlePluginPortal()
		// in case you use local plugin builds
		mavenLocal()
		// pre-releases from Vaadin:
		maven {
			url "https://repo.vaadin.com/nexus/content/repositories/vaadin-prereleases-201912/"
		}
	}
	dependencies {
		classpath("com.vaadin:vaadin-gradle-plugin:0.2.0")
	}
}

plugins {
    id 'war'
    id 'org.gretty' version '3.0.1'
//    id("com.vaadin")  // uncomment when the plugin is published in the Gradle plugin repository
}

apply plugin:"com.vaadin"

defaultTasks("clean", "vaadinBuildFrontend", "build")

repositories {
    jcenter()
}

gretty {
    contextPath = "/"
    servletContainer = "jetty9.4"
}

// example of how to configure the Gradle Vaadin Plugin
vaadinFlow {
    optimizeBundle = true
}

dependencies {
    // Vaadin 14
    compile("com.vaadin:vaadin-core:14.1.16") {
//         Webjars are only needed when running in Vaadin 13 compatibility mode
        ["com.vaadin.webjar", "org.webjars.bowergithub.insites",
                "org.webjars.bowergithub.polymer", "org.webjars.bowergithub.polymerelements",
                "org.webjars.bowergithub.vaadin", "org.webjars.bowergithub.webcomponents"]
                .forEach { group -> exclude(group: group) }
    }
    providedCompile("javax.servlet:javax.servlet-api:3.1.0")

    // logging
    // currently we are logging through the SLF4J API to SLF4J-Simple. See src/main/resources/simplelogger.properties file for the logger configuration
    compile("org.slf4j:slf4j-simple:1.7.30")

    // test support
    testCompile("com.github.mvysny.kaributesting:karibu-testing-v10:1.1.19")
    testCompile("junit:junit:4.12")
}

